<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dettagli Centralina - LoraAir</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Ho incluso Chart.js e plugin per i mini-grafici -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
    <style>
        :root {
            --primary-color: #4CAF50;
            --secondary-color: #2196F3;
            --accent-color: #FF9800;
            --background-color: #f4f7fa;
            --card-bg: #ffffff;
            --text-color: #333333;
            --site-gradient: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        }
        
        /* Ho creato uno stile base moderno - in linea con il resto del sito */
        body {
            background-color: var(--background-color);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: var(--text-color);
            position: relative;
        }
        
        /* Ho definito il design delle card - stile LoraAir */
        .col-md-4 {
            transition: all 0.3s ease;
        }
        
        .col-md-4:hover {
            transform: translateY(-5px);
        }
        
        /* Header e navbar estesi */
        .navbar {
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .navbar-brand img {
            transition: transform 0.3s ease;
        }
        
        .navbar-brand:hover img {
            transform: scale(1.05);
        }
        
        /* Indicatore di progresso dello scroll con gradiente del sito */
        .scroll-progress-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 4px;
            z-index: 1000;
        }
        
        .scroll-progress-bar {
            height: 100%;
            background: var(--site-gradient);
            width: 0;
            transition: width 0.2s ease;
        }
        
        /* Card con stile LoraAir */
        .card {
            border-radius: 15px;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
            overflow: hidden;
            border: none;
            background: var(--card-bg);
            position: relative;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        }
        
        /* Card principale con il gradiente del sito */
        .gradient-card {
            background: var(--site-gradient);
            color: white;
            border-radius: 15px;
            padding: 20px;
            overflow: hidden;
            position: relative;
        }
        
        /* Testo con gradiente per i numeri */
        .gradient-text {
            background: linear-gradient(135deg, #FF9966, #FF5E62);
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            font-weight: 700;
        }
        
        /* Bordo animato con il gradiente caratteristico del sito */
        .border-gradient {
            position: relative;
            border-radius: 15px;
            padding: 3px;
            background: var(--site-gradient);
            background-size: 200% 200%;
            animation: gradient-shift 4s ease infinite;
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.12);
        }
        
        .border-gradient > .card-header {
            border-top-left-radius: 12px;
            border-top-right-radius: 12px;
            margin-top: 0;
            margin-left: 0;
            margin-right: 0;
            position: relative;
            overflow: hidden;
        }
        
        .border-gradient > .card-header:before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.1);
            transform: translateX(-100%);
            transition: transform 0.6s ease;
        }
        
        .border-gradient:hover > .card-header:before {
            transform: translateX(100%);
        }
        
        .border-gradient > .card-body {
            border-bottom-left-radius: 12px;
            border-bottom-right-radius: 12px;
            background-color: var(--card-bg);
            margin-bottom: 0;
            margin-left: 0;
            margin-right: 0;
            transition: all 0.3s ease;
        }
        
        .border-gradient:hover > .card-body {
            background-color: #fafbfc;
        }
        
        @keyframes gradient-shift {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        /* Animazione di rotazione (usata in altre parti) */
        @keyframes rotate {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Animazione di galleggiamento */
        @keyframes float {
            0% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
            100% { transform: translateY(0); }
        }
        
        .float {
            animation: float 6s ease-in-out infinite;
        }
        
        /* Valori con effetto di aggiornamento */
        .value-updating {
            animation: value-flash 1s cubic-bezier(0.19, 1, 0.22, 1);
        }
        
        @keyframes value-flash {
            0% { color: var(--text-color); transform: scale(1); }
            50% { color: var(--accent-color); transform: scale(1.1); }
            100% { color: var(--text-color); transform: scale(1); }
        }
        
        /* Stili per i mini-grafici */
        .mini-chart-container {
            position: relative;
            height: 120px;
            width: 100%;
            margin-top: 15px;
            margin-bottom: 10px;
            padding: 15px 20px 5px 20px;
            transition: all 0.3s ease;
            overflow: visible; /* Consente agli elementi di estendersi oltre il contenitore */
        }
        
        .mini-chart-container:hover {
            transform: translateY(-2px);
        }
        
        .chart-title {
            font-size: 0.85rem;
            font-weight: 600;
            margin-bottom: 5px;
            display: flex;
            align-items: center;
            color: var(--text-color);
        }
        
        .chart-title i {
            margin-right: 5px;
            transition: transform 0.3s ease;
        }
        
        .mini-chart-container:hover .chart-title i {
            transform: rotate(10deg);
        }
        
        /* Icone con effetto hover */
        .card-header i {
            transition: transform 0.3s ease;
        }
        
        .card:hover .card-header i {
            transform: scale(1.2) rotate(5deg);
        }
        
        /* Badge con lo stile standard del sito */
        .badge {
            border-radius: 20px;
            padding: 6px 10px;
            font-weight: 500;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            transition: all 0.2s ease;
        }
        
        .badge:hover {
            transform: translateY(-2px);
        }
        
        /* Aggiunta classe per i badge con gradiente del sito */
        .badge-gradient {
            background: var(--site-gradient);
            color: white;
        }
        
        /* Indicatore luci colorati */
        .lux-indicator {
            letter-spacing: -3px;
            font-size: 18px;
            background: linear-gradient(90deg, 
                rgba(0,0,200,0.5) 0%, 
                rgba(0,128,255,0.5) 20%, 
                rgba(0,200,200,0.5) 40%, 
                rgba(0,200,0,0.5) 60%, 
                rgba(255,200,0,0.5) 80%, 
                rgba(255,0,0,0.5) 100%);
            -webkit-background-clip: text;
            background-clip: text;
            -webkit-text-fill-color: transparent;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        
        /* Badge con transizioni fluide */
        .badge {
            transition: all 0.3s ease;
        }
        
        /* Progress bar animate */
        .progress-bar {
            transition: width 0.7s ease-in-out;
        }
        
        /* Alert status */
        #data-status-alert {
            transition: all 0.3s ease;
        }
    </style>
</head>
<body>
    <!-- Indicatore di progresso dello scroll -->
    <div class="scroll-progress-container">
        <div class="scroll-progress-bar" id="scrollProgressBar"></div>
    </div>
    
    <%- include('./partials/nav.ejs', {isLoggedIn: true, user: user || {name: 'Utente'}}) %>
    
    <div class="container py-4">
        <div class="row mb-4">
            <div class="col-12">
                <div class="card h-100 border-gradient">
                    <div class="card-header text-white" style="background: var(--site-gradient);">
                        <h5 class="mb-0"><i class="fas fa-broadcast-tower me-2"></i>Dettagli Stazione</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <h2 class="mb-0">
                                <i class="fas fa-microchip me-2"></i>
                                <%= station.name || 'Centralina Senza Nome' %>
                            </h2>
                            <span class="badge bg-<%= station.status === 'active' ? 'success' : 'danger' %> px-3 py-2">
                                <i class="fas fa-<%= station.status === 'active' ? 'check-circle' : 'exclamation-circle' %> me-1"></i>
                                <%= station.status || 'sconosciuto' %>
                            </span>
                        </div>
                        
                        <div class="mb-4">
                            <div class="d-flex align-items-center mb-2">
                                <div class="me-2">
                                    <i class="fas fa-map-marker-alt fa-lg text-dark"></i>
                                </div>
                                <h4 class="mb-0" id="station-location">
                                    <% if (typeof station.position === 'string' && station.position) { %>
                                        <%= station.position %>
                                    <% } else if (typeof station.location === 'string' && station.location) { %>
                                        <%= station.location %>
                                    <% } else { %>
                                        Posizione non specificata
                                    <% } %>
                                </h4>
                            </div>
                            <!-- ID rimosso come richiesto dall'utente -->
                        </div>
                        <p class="mb-0 last-update"><i class="fas fa-clock me-2"></i>
                           Ultimo aggiornamento: <span id="lastUpdate"><%= 
                                sensorData?.timestamp ? new Date(sensorData.timestamp).toLocaleString() : 'N/D' 
                            %></span></p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Prima riga di card sensori -->
        <div class="row">
            <!-- Temperatura -->
            <div class="col-md-6 mb-4">
                <div class="card h-100 border-gradient">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-temperature-high"></i> Temperatura
                        </h5>
                        <h2 class="display-4 mb-0 gradient-text float" id="temperature-value">
                            <%= sensorData?.temperature ? parseFloat(sensorData.temperature).toFixed(1) : '-- ' %> °C
                        </h2>
                        <div class="chart-title"><i class="fas fa-chart-line"></i> Andamento storico</div>
                        <div class="mini-chart-container">
                            <canvas id="temperature-chart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Umidità -->
            <div class="col-md-6 mb-4">
                <div class="card h-100 border-gradient">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-tint"></i> Umidità
                        </h5>
                        <h2 class="display-4 mb-0 gradient-text float" id="humidity-value">
                            <span><%= sensorData?.humidity ? parseFloat(sensorData.humidity).toFixed(1) : '-- ' %></span><span>%</span>
                        </h2>
                        <div class="progress mt-3" style="height: 10px;">
                            <div class="progress-bar bg-info" role="progressbar" id="humidity-bar" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        <div class="chart-title"><i class="fas fa-chart-line"></i> Andamento storico</div>
                        <div class="mini-chart-container">
                            <canvas id="humidity-chart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row">
            <!-- Qualità dell'aria -->
            <div class="col-md-6 mb-4">
                <div class="card h-100 border-gradient">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-wind"></i> Qualità dell'aria
                        </h5>
                        <h2 class="display-4 mb-0 gradient-text float" id="air-quality-value">
                            <%= sensorData?.gas ? parseFloat(sensorData.gas).toFixed(1) : '-- ' %> ppm
                        </h2>
                        <span class="badge bg-success mt-2" id="air-quality-status">Eccellente</span>
                        <div class="chart-title"><i class="fas fa-chart-line"></i> Andamento storico</div>
                        <div class="mini-chart-container">
                            <canvas id="gas-chart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Pressione -->
            <div class="col-md-6 mb-4">
                <div class="card h-100 border-gradient">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-tachometer-alt"></i> Pressione
                        </h5>
                        <h2 class="display-4 mb-0 gradient-text float" id="pressure-value">
                            <%= sensorData?.pressure ? parseFloat(sensorData.pressure).toFixed(1) : '-- ' %> hPa
                        </h2>
                        <div class="chart-title"><i class="fas fa-chart-line"></i> Andamento storico</div>
                        <div class="mini-chart-container">
                            <canvas id="pressure-chart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- UV -->
            <div class="col-md-6 mb-4">
                <div class="card h-100 border-gradient">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-sun"></i> Indice UV
                        </h5>
                        <h2 class="display-4 mb-0 gradient-text float" id="uv-value">
                            <%= sensorData?.uv ? parseFloat(sensorData.uv).toFixed(1) : '-- ' %>
                        </h2>
                        <div id="uv-risk" class="badge bg-warning text-dark mt-2">Moderato</div>
                        <div class="chart-title"><i class="fas fa-chart-line"></i> Andamento storico</div>
                        <div class="mini-chart-container">
                            <canvas id="uv-chart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Luminosità -->
            <div class="col-md-6 mb-4">
                <div class="card h-100 border-gradient">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="far fa-lightbulb"></i> Luminosità
                        </h5>
                        <h2 class="display-4 mb-0 gradient-text float" id="lux-value">
                            <%= sensorData?.lux ? parseFloat(sensorData.lux).toFixed(1) : '-- ' %> lux
                        </h2>
                        <div class="chart-title"><i class="fas fa-chart-line"></i> Andamento storico</div>
                        <div class="mini-chart-container">
                            <canvas id="lux-chart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            

        </div>
        
        <!-- Terza riga di card sensori -->
        <div class="row">
            <!-- Pioggia -->
            <div class="col-md-6 mb-4">
                <div class="card h-100 border-gradient">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-cloud-rain"></i> Pioggia
                        </h5>
                        <h2 class="display-4 mb-0 gradient-text float" id="rain-value">
                            <%= sensorData?.rain ? sensorData.rain.toFixed(1) : '--' %> mm
                        </h2>
                        <p class="text-muted mt-2" id="rain-status">
                            <% if (sensorData?.rain && sensorData.rain > 5) { %>
                                Pioggia forte
                            <% } else if (sensorData?.rain && sensorData.rain > 0) { %>
                                Pioggia leggera
                            <% } else { %>
                                Nessuna pioggia
                            <% } %>
                        </p>
                        <div class="chart-title"><i class="fas fa-chart-line"></i> Andamento storico</div>
                        <div class="mini-chart-container">
                            <canvas id="rain-chart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Umidità del Suolo -->
            <div class="col-md-6 mb-4">
                <div class="card h-100 border-gradient">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-seedling"></i> Umidità Suolo
                        </h5>
                        <h2 class="display-4 mb-0 gradient-text float" id="soil-moisture-value">
                            <span><%= sensorData?.soilMoisture ? parseFloat(sensorData.soilMoisture).toFixed(1) : '-- ' %></span><span>%</span>
                        </h2>
                        <div class="progress mt-3" style="height: 10px;">
                            <div class="progress-bar bg-success" id="soil-moisture-bar" role="progressbar" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        <div class="chart-title"><i class="fas fa-chart-line"></i> Andamento storico</div>
                        <div class="mini-chart-container">
                            <canvas id="soil-moisture-chart"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Velocità del vento (Card a larghezza piena) -->
        <div class="row mt-4">
            <div class="col-12 mb-4">
                <div class="card h-100 border-gradient">
                    <div class="card-body">
                        <h5 class="card-title">
                            <i class="fas fa-wind"></i> Velocità del vento
                        </h5>
                        <div class="row">
                            <div class="col-md-4">
                                <h2 class="display-3 mb-0 gradient-text float" id="wind-value">
                                    <%= sensorData?.wind ? parseFloat(sensorData.wind).toFixed(1) : '-- ' %> Km/h
                                </h2>
                                <p class="text-muted mt-2" id="wind-status">
                                    <% if (sensorData?.wind && sensorData.wind > 50) { %>
                                        Vento forte
                                    <% } else if (sensorData?.wind && sensorData.wind > 20) { %>
                                        Vento moderato
                                    <% } else if (sensorData?.wind && sensorData.wind > 0) { %>
                                        Brezza leggera
                                    <% } else { %>
                                        Calma
                                    <% } %>
                                </p>
                            </div>
                            <div class="col-md-8">
                                <div class="chart-title"><i class="fas fa-chart-line"></i> Andamento storico della velocità del vento</div>
                                <div class="mini-chart-container" style="height: 180px;"> <!-- Grafico più alto -->
                                    <canvas id="wind-chart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts necessari -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Estrazione dell'ID della stazione con maggiore robustezza
        let STATION_ID = '<%= station._id %>';
        
        // Verifica se l'ID è definito correttamente
        if (!STATION_ID || STATION_ID === 'undefined' || STATION_ID === '') {
            // Prova a estrarre l'ID dall'URL come fallback
            const urlParts = window.location.pathname.split('/');
            const lastPart = urlParts[urlParts.length - 1];
            
            if (lastPart && lastPart.length > 0 && lastPart !== 'undefined') {
                STATION_ID = lastPart;
            } else {
                // Se ancora fallisce, usa un valore vuoto
                STATION_ID = '';
                console.error('Impossibile determinare l\'ID della stazione');
            }
        }
        
        // Stato dati per confronto
        let lastData = {};
        
        // Registrazione del plugin DataLabels
        Chart.register(ChartDataLabels);
        
        // Inizializzazione
        document.addEventListener('DOMContentLoaded', function() {
            // Barra di progresso e altre inizializzazioni
            
            // Gestione dello scroll per la barra di progresso
            const scrollProgressBar = document.getElementById('scrollProgressBar');
            if (scrollProgressBar) {
                window.addEventListener('scroll', () => {
                    const scrollTop = window.scrollY;
                    const scrollHeight = document.documentElement.scrollHeight - window.innerHeight;
                    const scrollPercentage = (scrollTop / scrollHeight) * 100;
                    scrollProgressBar.style.width = `${scrollPercentage}%`;
                });
            }
            
            // Imposta stato iniziale indicatori
            updateStatusIndicators();
            
            // Aggiornamento dati sensori
            async function updateSensorData() {
                if (!STATION_ID) {
                    console.error('ID stazione non disponibile');
                    return;
                }
                
                try {
                    const response = await fetch(`/api/sensor-data?stationId=${STATION_ID}`);
                    if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
                    
                    const data = await response.json();
                    
                    // Aggiorna la posizione se disponibile
                    if (data.position) {
                        const locationElement = document.getElementById('station-location');
                        if (locationElement) {
                            // Verifica se la posizione è cambiata per applicare l'animazione
                            const currentPosition = locationElement.textContent.trim();
                            if (currentPosition !== data.position) {
                                // Applica animazione di aggiornamento
                                locationElement.classList.remove('animate__fadeIn');
                                void locationElement.offsetWidth; // Riavvia l'animazione
                                locationElement.classList.add('animate__fadeIn');
                                
                                // Aggiorna il testo con animazione rapida e fluida
                                locationElement.textContent = data.position;
                            }
                        }
                    }
                    
                    // Aggiorna timestamp
                    if (data.timestamp) {
                        const date = new Date(data.timestamp);
                        const lastUpdateElement = document.getElementById('lastUpdate');
                        if (lastUpdateElement) {
                            lastUpdateElement.textContent = date.toLocaleString();
                        }
                    }
                    
                    // Aggiorna tutti i valori, con animazione solo se cambiati
                    updateSensorValue('temp-value', data?.temperature?.current, '\u00b0C', lastData?.temperature?.current);
                    updateSensorValue('humidity-value', data?.humidity?.current, '%', lastData?.humidity?.current);
                    updateSensorValue('air-quality-value', data?.airQuality?.current, 'ppm', lastData?.airQuality?.current);
                    updateSensorValue('pressure-value', data?.pressure, 'hPa', lastData?.pressure);
                    updateSensorValue('uv-value', data?.uv, '', lastData?.uv);
                    updateSensorValue('lux-value', data?.lux, 'lux', lastData?.lux);
                    updateSensorValue('rain-value', data?.rain, 'mm', lastData?.rain);
                    updateSensorValue('soil-moisture-value', data?.soilMoisture, '%', lastData?.soilMoisture);
                    
                    // Aggiorna indicatori di stato
                    if (data.humidity && data.humidity.current !== undefined) {
                        const humBar = document.getElementById('humidity-bar');
                        if (humBar) {
                            humBar.style.width = `${data.humidity.current}%`;
                            humBar.setAttribute('aria-valuenow', data.humidity.current);
                        }
                    }
                    
                    if (data.soilMoisture !== undefined) {
                        const soilBar = document.getElementById('soil-moisture-bar');
                        if (soilBar) {
                            soilBar.style.width = `${data.soilMoisture}%`;
                            soilBar.setAttribute('aria-valuenow', data.soilMoisture);
                        }
                    }
                    
                    // Aggiorna lux indicator
                    if (data.lux !== undefined) {
                        const luxValue = parseFloat(data.lux);
                        const indicator = document.getElementById('lux-indicator');
                        if (indicator) {
                            const numFilled = Math.min(Math.floor(luxValue / 200), 10);
                            indicator.style.opacity = numFilled > 0 ? 1 : 0.3;
                        }
                    }
                    
                    // Aggiorna badge stato aria
                    if (data.airQuality && data.airQuality.current !== undefined) {
                        const aqValue = parseFloat(data.airQuality.current);
                        const badge = document.getElementById('air-quality-status');
                        
                        if (badge) {
                            if (aqValue < 50) {
                                badge.className = 'badge bg-success mt-2';
                                badge.textContent = 'Eccellente';
                            } else if (aqValue < 100) {
                                badge.className = 'badge bg-success mt-2';
                                badge.textContent = 'Buona';
                            } else if (aqValue < 200) {
                                badge.className = 'badge bg-warning text-dark mt-2';
                                badge.textContent = 'Moderata';
                            } else if (aqValue < 300) {
                                badge.className = 'badge bg-danger mt-2';
                                badge.textContent = 'Scarsa';
                            } else {
                                badge.className = 'badge bg-danger mt-2';
                                badge.textContent = 'Pericolosa';
                            }
                        }
                    }
                    
                    // Aggiorna badge uv
                    if (data.uv !== undefined) {
                        const uvValue = parseFloat(data.uv);
                        const badge = document.getElementById('uv-risk');
                        
                        if (badge) {
                            if (uvValue < 3) {
                                badge.className = 'badge bg-success mt-2';
                                badge.textContent = 'Basso';
                            } else if (uvValue < 6) {
                                badge.className = 'badge bg-warning text-dark mt-2';
                                badge.textContent = 'Moderato';
                            } else if (uvValue < 8) {
                                badge.className = 'badge bg-orange mt-2';
                                badge.textContent = 'Alto';
                            } else if (uvValue < 11) {
                                badge.className = 'badge bg-danger mt-2';
                                badge.textContent = 'Molto alto';
                            } else {
                                badge.className = 'badge bg-dark mt-2';
                                badge.textContent = 'Estremo';
                            }
                        }
                    }
                    
                    // Aggiorna badge pioggia
                    if (data.rain !== undefined) {
                        const rainValue = parseFloat(data.rain);
                        const badge = document.getElementById('rain-status');
                        
                        if (badge) {
                            if (rainValue <= 0.1) {
                                badge.className = 'badge bg-light text-dark mt-2';
                                badge.textContent = 'Nessuna precipitazione';
                            } else if (rainValue < 2.5) {
                                badge.className = 'badge bg-info text-dark mt-2';
                                badge.textContent = 'Pioggia leggera';
                            } else if (rainValue < 10) {
                                badge.className = 'badge bg-primary mt-2';
                                badge.textContent = 'Pioggia moderata';
                            } else if (rainValue < 50) {
                                badge.className = 'badge bg-primary mt-2';
                                badge.textContent = 'Pioggia forte';
                            } else {
                                badge.className = 'badge bg-danger mt-2';
                                badge.textContent = 'Pioggia estrema';
                            }
                        }
                    }
                    
                    // Nota: il codice per lo stato simulazione è stato rimosso poiché la card è stata eliminata
                    
                    // Salva i dati per il prossimo confronto
                    lastData = JSON.parse(JSON.stringify(data));
                    
                } catch (error) {
                    console.error('Errore durante l\'aggiornamento dei dati:', error);
                }
            }
            
            // Imposta stato iniziale indicatori
            function updateStatusIndicators() {
                // Indice aria
                const aqValue = document.getElementById('air-quality-value');
                if (aqValue) {
                    const text = aqValue.textContent.trim();
                    if (text && text !== '-- ppm') {
                        const value = parseFloat(text);
                        updateAirQualityBadge(value);
                    }
                }
                
                // Umidità
                const humValue = document.getElementById('humidity-value');
                if (humValue) {
                    const text = humValue.textContent.trim();
                    if (text && text !== '-- %') {
                        const value = parseFloat(text);
                        const bar = document.getElementById('humidity-bar');
                        if (bar) {
                            bar.style.width = `${value}%`;
                            bar.setAttribute('aria-valuenow', value);
                        }
                    }
                }
                
                // Umidità suolo
                const soilValue = document.getElementById('soil-moisture-value');
                if (soilValue) {
                    const text = soilValue.textContent.trim();
                    if (text && text !== '-- %') {
                        const value = parseFloat(text);
                        const bar = document.getElementById('soil-moisture-bar');
                        if (bar) {
                            bar.style.width = `${value}%`;
                            bar.setAttribute('aria-valuenow', value);
                        }
                    }
                }
            }
            
            // Funzione per aggiornare il badge della qualità dell'aria
            function updateAirQualityBadge(value) {
                const badge = document.getElementById('air-quality-status');
                if (!badge) return;
                
                if (value < 50) {
                    badge.className = 'badge bg-success mt-2';
                    badge.textContent = 'Eccellente';
                } else if (value < 100) {
                    badge.className = 'badge bg-success mt-2';
                    badge.textContent = 'Buona';
                } else if (value < 200) {
                    badge.className = 'badge bg-warning text-dark mt-2';
                    badge.textContent = 'Moderata';
                } else if (value < 300) {
                    badge.className = 'badge bg-danger mt-2';
                    badge.textContent = 'Scarsa';
                } else {
                    badge.className = 'badge bg-danger mt-2';
                    badge.textContent = 'Pericolosa';
                }
            }
            
            // Funzione helper per aggiornare i valori con animazione
            function updateSensorValue(elementId, value, unit, oldValue) {
                const element = document.getElementById(elementId);
                if (!element) return;
                
                if (value === undefined || value === null) {
                    element.textContent = `-- ${unit}`;
                    return;
                }
                
                // Gestisci sia valori diretti che oggetti
                let actualValue = value;
                
                // Converti a numero e formatta
                const formattedValue = parseFloat(actualValue).toFixed(1);
                element.textContent = `${formattedValue} ${unit}`;
                
                // Aggiungi animazione solo se il valore è cambiato
                if (oldValue !== undefined && oldValue !== null && parseFloat(oldValue) !== parseFloat(actualValue)) {
                    element.classList.add('value-updating');
                    setTimeout(() => element.classList.remove('value-updating'), 1000);
                }
            }
            
            // Nessun dato simulato - mostra solo i dati reali ricevuti dal server
            
            // Inizializza gli indicatori grafici vuoti
            document.getElementById('humidity-bar').style.width = '0%';
            document.getElementById('soil-moisture-bar').style.width = '0%';
            
            // Aggiorna gli indicatori di stato con valori vuoti
            updateStatusIndicators();
            
            // Aggiorna timestamp con il tempo corrente del server
            const lastUpdateElement = document.getElementById('lastUpdate');
            if (lastUpdateElement && lastUpdateElement.textContent === 'N/D') {
                lastUpdateElement.textContent = new Date().toLocaleString();
            }
            
            // Colori predefiniti per i grafici di ciascun sensore
            const chartColors = {
                temperature: { line: '#FF5722', fill: 'rgba(255, 87, 34, 0.2)' },
                humidity: { line: '#2196F3', fill: 'rgba(33, 150, 243, 0.2)' },
                gas: { line: '#9C27B0', fill: 'rgba(156, 39, 176, 0.2)' },
                pressure: { line: '#4CAF50', fill: 'rgba(76, 175, 80, 0.2)' },
                uv: { line: '#FF9800', fill: 'rgba(255, 152, 0, 0.2)' },
                lux: { line: '#FFEB3B', fill: 'rgba(255, 235, 59, 0.2)' },
                'soil-moisture': { line: '#8BC34A', fill: 'rgba(139, 195, 74, 0.2)' },
                rain: { line: '#03A9F4', fill: 'rgba(3, 169, 244, 0.2)' },
                wind: { line: '#607D8B', fill: 'rgba(96, 125, 139, 0.2)' } // Ho aggiunto il colore per il vento
            };
            
            // Inizializzazione dei dati dei grafici con array vuoti
            function getInitialChartData() {
                return { 
                    labels: [], 
                    values: [] 
                };
            }
            

            
            // Configurazione comune per i mini-grafici
            function getChartConfig(sensorType, color) {
                const data = getInitialChartData();
                
                return {
                    type: 'line',
                    data: {
                        labels: data.labels,
                        datasets: [{
                            label: 'Valore',
                            data: data.values,
                            borderColor: color.line,
                            backgroundColor: color.fill,
                            borderWidth: 2,
                            tension: 0.4,
                            fill: true,
                            borderDash: [5, 5], // Linea tratteggiata per l'andamento storico
                            pointRadius: 0 // Nascondi i punti per un aspetto più pulito
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { display: false }, // Nascondi la legenda
                            tooltip: { enabled: true }, // Mantieni i tooltip
                            datalabels: {
                                align: 'top',
                                anchor: 'end',
                                color: function(context) {
                                    return context.dataset.borderColor;
                                },
                                font: {
                                    weight: 'bold',
                                    family: "'Segoe UI', sans-serif",
                                    size: 10
                                },
                                formatter: function(value, context) {
                                    // Mostra solo alcuni valori per non affollare il grafico
                                    // Mostra primo, ultimo e alcuni punti in mezzo
                                    const index = context.dataIndex;
                                    const count = context.dataset.data.length;
                                    if (index === 0 || index === count-1 || index === Math.floor(count/2)) {
                                        return value;
                                    }
                                    return null;
                                },
                                padding: 8,
                                // Assicura che le etichette non vengano tagliate ai bordi
                                clamp: false,
                                clip: false,
                                // Usa un offset per creare più spazio
                                offset: 10
                            }
                        },
                        scales: {
                            x: {
                                display: false, // Nascondi l'asse X per un aspetto più pulito
                                ticks: {
                                    padding: 15 // Aggiungi padding per i tick (anche se nascosti)
                                }
                            },
                            y: {
                                display: false, // Nascondi l'asse Y per un aspetto più pulito
                                beginAtZero: false,
                                ticks: {
                                    padding: 15 // Aggiungi padding per i tick (anche se nascosti)
                                }
                            }
                        },
                        // Imposta il padding del grafico per dare più spazio alle etichette
                        layout: {
                            padding: {
                                left: 15,
                                right: 15,
                                top: 20,
                                bottom: 5
                            }
                        },
                        animation: {
                            duration: 400 // Animazione veloce come preferisce l'utente
                        },
                        elements: {
                            line: {
                                borderWidth: 2
                            }
                        }
                    }
                };
            }
            
            // Variabile per memorizzare tutti i grafici
            let charts = {};
            
            // Prepariamo i dati storici dal modello
            const stationReadings = JSON.parse('<%= JSON.stringify(station.readings || []) %>');
            
            // Funzione per preparare i dati storici dalle letture
            function prepareHistoricalData(readings) {
                if (!readings || readings.length === 0) return {};
                
                // Organizza i dati per tipo di sensore
                const sortedReadings = [...readings].sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
                const labels = sortedReadings.map(r => {
                    try {
                        return new Date(r.timestamp).toLocaleTimeString();
                    } catch (e) {
                        return '';
                    }
                });
                
                return {
                    temperature: {
                        labels: labels,
                        values: sortedReadings.map(r => parseFloat(r.temperature) || null)
                    },
                    humidity: {
                        labels: labels,
                        values: sortedReadings.map(r => parseFloat(r.humidity) || null)
                    },
                    gas: {
                        labels: labels,
                        values: sortedReadings.map(r => parseFloat(r.gas) || null)
                    },
                    pressure: {
                        labels: labels,
                        values: sortedReadings.map(r => parseFloat(r.pressure) || null)
                    },
                    uv: {
                        labels: labels,
                        values: sortedReadings.map(r => parseFloat(r.uv) || null)
                    },
                    lux: {
                        labels: labels,
                        values: sortedReadings.map(r => parseFloat(r.lux) || null)
                    },
                    'soil-moisture': {
                        labels: labels,
                        values: sortedReadings.map(r => parseFloat(r.soilMoisture) || null)
                    },
                    rain: {
                        labels: labels,
                        values: sortedReadings.map(r => parseFloat(r.rain) || null)
                    },
                    wind: {
                        labels: labels,
                        values: sortedReadings.map(r => parseFloat(r.wind) || null)
                    }
                };
            }
            
            // Prepara i dati storici
            const historicalData = prepareHistoricalData(stationReadings);
            
            // Funzione per inizializzare tutti i mini-grafici
            function initCharts() {
                const sensorTypes = ['temperature', 'humidity', 'gas', 'pressure', 'uv', 'lux', 'soil-moisture', 'rain', 'wind'];
                
                sensorTypes.forEach(type => {
                    const canvas = document.getElementById(`${type}-chart`);
                    if (canvas) {
                        const ctx = canvas.getContext('2d');
                        charts[type] = new Chart(ctx, getChartConfig(type, chartColors[type] || chartColors.temperature));
                    }
                });
            }
            
            // Funzione per caricare i dati storici
            function loadHistoricalData() {
                // Utilizzo l'ID fisso del dispositivo visto nei log
                const stationId = '681a1a601e6779a1233b5090';  // ID del dispositivo "lora001"
                console.log('Caricamento dati storici per stazione ID:', stationId);
                
                // Richiesta all'API per i dati storici dal database
                fetch(`/api/devices/${stationId}/historical-data?limit=20`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Errore HTTP: ${response.status}`);
                        }
                        return response.json();
                    })
                    .then(result => {
                        console.log('RISPOSTA API COMPLETA:', result);
                        
                        if (result.success && result.data) {
                            console.log('DATI RICEVUTI DAL DB:', result.data);
                            console.log('TIPI DI SENSORI RICEVUTI:', Object.keys(result.data));
                            
                            // Controlla quali dati sono disponibili per ogni sensore
                            Object.keys(result.data).forEach(sensorType => {
                                console.log(`DATI PER ${sensorType}:`, result.data[sensorType]);
                                if (result.data[sensorType].values && result.data[sensorType].values.length > 0) {
                                    console.log(`- Valori per ${sensorType}:`, result.data[sensorType].values);
                                    console.log(`- Etichette per ${sensorType}:`, result.data[sensorType].labels);
                                } else {
                                    console.warn(`- NESSUN VALORE per ${sensorType}`);
                                }
                            });
                            
                            // Usa SOLO i dati dal database
                            updateCharts(result.data);
                        } else {
                            console.error('Errore nella risposta API:', result.error || 'Errore sconosciuto');
                        }
                    })
                    .catch(error => {
                        console.error('Errore nel caricamento dei dati storici:', error);
                    });
            }
            
            // Funzione per aggiornare i mini-grafici con nuovi dati
            function updateCharts(data) {
                if (!data) {
                    console.error('ERRORE: Nessun dato fornito a updateCharts');
                    return;
                }
                
                console.log('INIZIO AGGIORNAMENTO GRAFICI con dati:', data);
                console.log('Grafici disponibili:', Object.keys(charts));
                
                // Mappatura nomi sensori per compatibilità
                const sensorMap = {
                    'temperature': 'temperature',
                    'humidity': 'humidity',
                    'gas': 'gas',
                    'pressure': 'pressure',
                    'uv': 'uv',
                    'lux': 'lux',
                    'soil-moisture': 'soil-moisture',
                    'soilMoisture': 'soil-moisture',
                    'rain': 'rain'
                };
                
                // Per ogni tipo di sensore, aggiorna il rispettivo grafico
                Object.keys(data).forEach(type => {
                    // Utilizza la mappatura per garantire la compatibilità
                    const chartType = sensorMap[type] || type;
                    console.log(`AGGIORNAMENTO: Tipo originale '${type}' mappato a '${chartType}'`);
                    
                    if (charts[chartType]) {
                        console.log(`GRAFICO TROVATO per ${chartType}`);
                        
                        if (data[type]) {
                            const chartData = data[type];
                            const labels = chartData.labels || [];
                            const values = chartData.values || [];
                            
                            console.log(`ASSEGNAZIONE DATI a ${chartType}:`);
                            console.log('- Labels:', labels);
                            console.log('- Values:', values);
                            
                            charts[chartType].data.labels = labels;
                            charts[chartType].data.datasets[0].data = values;
                            console.log(`AGGIORNAMENTO GRAFICO ${chartType}`)
                            charts[chartType].update('none'); // Aggiornamento senza animazione
                        } else {
                            console.error(`ERRORE: Dati mancanti per ${type}`);
                        }
                    } else {
                        console.error(`ERRORE: Grafico non trovato per ${chartType}`);
                    }
                });
            }
            
            // Inizializzazione dei grafici dopo il caricamento della pagina
            initCharts();
            
            // Carica immediatamente i dati storici dal DB
            loadHistoricalData();
            
            // Tenta di recuperare dati reali e poi ogni 30 secondi
            updateSensorData();
            setInterval(() => {
                updateSensorData();
                loadHistoricalData(); // Aggiorna anche i dati storici
            }, 30000);
            
            // Fine inizializzazioni
        });
    </script>
    
    <!-- Ho incluso il banner dei cookie per il consenso GDPR -->
    <%- include('./partials/cookie-banner.ejs') %>
</body>
</html>
